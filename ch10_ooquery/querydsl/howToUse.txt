queryDsl 의존성 추가

querydsl-jpa : querydsl jpa 라이브러리
querydsl-apt : 쿼리타입 Q를 생성할 때 필요한 라이브러리


## 환경설정
criteria의 메타모델처럼 엔티티를 기반으로 쿼리 타입이라는 쿼리용 클래스를 생성해야한다
다음과 같은 쿼리 타입 생성용 플러그인을 pom.xml 에 추가

<build>
    <plugins>
        <plugin>
            <groupId>com.mysema.maven</groupId>
            <artifactId>apt-maven-plugin</artifactId>
            <version>1.1.3</version>

            <executions>
                <execution>
                    <goals>
                        <goal>process</goal>
                    </goals>
                    <configuration>
                        <outputDirectory>target/generated-sources/java</outputDirectory>
                        <processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>
                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>

mvn compile 하면 outputDirectory에 지정한 target/generated-sources 위치에 QMember.java 처럼 Q로 시작하는 쿼리 타입들이 생성됨
target/generated-sources 를 소스 경로에 추가하면 됨




// 사용법
public void queryDsl(){
    EntityManager em = emf.createEntityManager();

    JPAQuery query = new JPAQuery(em);
    QMember qMemeber = new QMember("m"); // 생성되는 jpql의 별칭이 m 
    List<Member> members = query.from(qMember)
        .where(qMember.name.eq("회원1"))
        .orderby(qMember.name.desc())
        .list(qMember);
}

// 검색조건 쿼리
and or 사용가능 
.where(item.name.eq("p1").and(item.price.gt(1000)))

// 결과 조회
uniqueResult() 조회결과가 한건일때 사용, 없으면 null, 하나 이상이면 nonuniqex 발생
singleResult() uniqueResult와 같지만 더 많을때는 처음 데이터 반환
list() 결과 하나 이상일때 사용, 결과 없으면 빈 컬렉션 반환

// 페이징과 정렬
QItem item = QItem.item;

query.from(item)
    .where(item.price.gt(20000))
    .orderBy(item.price.desc(), item.stockQuantity.asc())
    .offset(10).limit(20)
    .list(item);

// 그룹
query.from(item)
    .groupBy(item.price)
    .having(item.price.gt(1000))
    .list(item);

// 조인
QOrder order = QOrder.order;
QMember member = QMember.member;
QOrderItem orderItem = QOrderItem.orderItem;

query.from(order)
    .join(order.member, member)
    .leftJoin(order.orderItems, orderItem)
    .list(order);
or
query.from(order)
    .leftJoin(order.orderItems, orderItem)
    .on(orderItem.count.gt(2))
    .list(order);
or
query.from(order)
    .innerJoin(order.member, member).fetch()
    .leftJoin(order.orderItems, orderItem).fetch()
    .list();
// 세타조인
query.from(order, member)
    .where(order.member.eq(member))
    .list(order);

// 서브 쿼리
query.from(item)
    .where(item.price.eq(
        new JPASubQuery().from(itemSub).uniuqe(itemSub.price.max())
    ))
    .list();
query.from(item)
    .where(item.in(
        new JPASubQuery().from(itemsub)
            .where(item.name.eq(itemSub.name))
            .list(itemSub)
    ))
    .list(item);



## 프로젝션과 결과 반환
* 대상이 하나일때
QItem item = QItem.item;
List<String> result = query.from(item).list(item.name);

* 여러 컬럼 반환과 튜플
QItem item = QItem.item;
List<Tuple> result = query.from(item).list(item.name, item.price);
// 똑같다 위와 list(new QTuple(item.name, item.price));

for(Tuple tuple : result){
    tuple.get(item.name);
    tuple.get(item.price);
}

* 빈 생성 (특정 객체로 받고싶다)
List<ItemDTO> result = query.from(item).list(
    Projections.bean(ItemDTO.class, item.name.as("username"), item.price));
멤버변수이름과 엔티티필드명이 다르면 .as() 쓰자




## 수정, 삭제 ,배치
JPQL 배치쿼리와 같이 영속성 컨텍스트를 무시하고 데이터베이스를 직접 쿼리한다는 점에 유의해야함
QItem item = QItem.item;
JPAUpdateClause updateClause = new JPAUpdateClause(em, item);
long count = updateClause.where(item.name.eq("우루루루루룰"))
    .set(item.price, item.price.add(100))
    .execute();

QItem item = QItem.item;
JPADeleteClause deleteClause = new JPADeleteClause(em, item);
long count = deleteClause.where(item.name.eq("우루루루루루룰"))
    .execute();



## 동적 쿼리
BooleanBuilder를 사용해서 특정 조거너에 따른 동적쿼리를 편리하게 생성할 수 있다.
SearchParam param = new SearchParam();
param.setName("이이이");
param.setPrice(10000);

QItem item = QItem.item;
BooleanBuilder builder = new BooleanBuilder();

if(StringUtils.hasText(param.getName()))
    builder.and(item.name.contains(param.getName()));
if(param.getPrice() != null)
    builder.and(item.price.gt(param.getPrice()));
List<Item> result = query.from(item)
    .where(builder)
    .list(item);



## 메소드 위임
이 기능을 사용하면 쿼리 타입에 검색조건을 직접 정의할 수 있다.
public class ItemExpression{
    @QueryDelegate(Item.class)
    public static BooleanExpression isExpensive(QItem item, Integer price){
        return item.price.gt(price);
    }
}
// 사용
query.from(item).where(item.isExpensive(30000)).list(item);
필요하면 String, Date 같은 자바 기본 내장타입에도 메소드 위임 기능을 사용할 수 있다.

