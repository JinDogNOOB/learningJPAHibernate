## createQuery 두번째 매개변수에 
반환타입을 지정하면 TypedQuery 반환되고
안지정하면 그냥 Query 객체 반환됨

// 타입 지정
TypedQuery<Member> query = em.createQuery("select m from member m ', Member.calss);
List<Member> resultList = query.getResultList();
for(Member member : resultList){
    System.out.println("member = "+ member);
}

// 타입 안지정 ex) 이름하고 나이만 가져오고싶다
Query query = em.createQuery("select m.userName, m.age from member m");
List resultList = query.getResultList();

for(Object o : resultList){
    Object[] result = (Object[])o; // 결과가 둘 이상이면 Object[] 반환함
    System.out.println("username"+ result[0]);
    System.out.println("age" + result[1]);
}


## 결과 조회
query.getResultList(); // 결과를 예제로 반환한다, 결과가 없으면 빈 컬렉션 반환
query.getSignleResult(); // 결과가 정확히 하나일때 사용 결과가 없으면 NoResultEx예외 결과가 하나보다 많으면 NonUniqueResultEx예회 발생


## 파라미터 바인딩
String userNameParam = "User1";
TypedQuery<Member> query = em.createQuery("select m from Member m where m.username = :username", Member.class);
query.setParameter("username", userNameParam);
List<Member> resultList = query.getResultList();


## 프로젝션
select 절에 조회할 대상을 지정하는 것을 Projection이라고 함 select [프로젝션 대상] from
프로젝션 대상에는 엔티티, 임베디드 타입, 스칼라 타입이 들어갈 수 있음

* 엔티티 프로젝션
select m from Member m //회원
select m.team from Member m // 팀
// 조회한 엔티티는 영속성 컨텍스트에서 관리됨

* 임베디드 타입 프로젝션
String query = "select o.address from Order o";
List<Address> addresseds = em.createQuery(query, Address.class).getResultList();
// 임베디드 타입은 엔티티 타입이 아닌 값 타입이다. 그래서 영속성 컨텍스트에서 이거는 관리하지않는다

* 스칼라 타입 프로젝션
숫자, 문자, 날짜오 ㅏ같은 기본 데이터 타입들을 스칼라 타입이라 한다. 전체 회원의 이름을 조회한다고 치면 다음과 같다
List<String> userNames = em.createQuery("select m.username from Member m", String.class).getResultList();

* 여러값 조회할때 Object[] 에서 값 뽑아내서 그냥 사용하지말고 DTO를만들어서 넣는편이 보기가 좋다
List<Object[]> resultList = em.createQuery("select m.username, m.age from Member m").getResultList();
// 객체변환작업
List<UserDTO> userDTOs = new ArrayList<UserDTO>();
for( Object[] row : resultList){
    UserDTO userDTO = new UserDTO((String)row[0], (Integer)row[1]);
    userDTOs.add(userDTO);
}
이것을 더 간단하게 바꿀려면 다음과 같이 하자
TypedQuery<UserDTO> query = em.createQuery("select new jpabook.jpql(패키지경로).UserDTO(m.username, m.age) from Member m", UserDTO.class);
List<UserDTO> resultList = query.getResultList();


## 페이징 API
데이터베이스마다 페이징을 처리하는 sql문법이 다른데 JPA는 페이징을 다음 두 API로 추상화해서 페이징기능을 제공함
setFirstResult(int startPosition) // 조회 시작 위치
setMaxResults(int maxResult) // 조회할 데이터 수
// 실사용
TypedQuery<Member> query = em.createQuery("select m from Member m order by m.username DESC", Member.class);
query.setFirstResult(10);
query.setMaxResults(20);
query.getResultList();


## 집합과 정렬
select 
    count(m), //회원수
    sum(m.age), //나이 합
    avg(m.age), // 나이 평균
    max(m.age), // 최대 나이
    min(m.age) // 최소 나이
from meber m


## Group by, Having
select t.name, count(m.age), sum(m.age), avg(m.age), max(m.age), min(m.age)
from Member m LEFT JOIN m.team t
group by t.name
팀 이름을 기준으로 뭉쳐서 팀당 통계데이터 구한다

위에서 평균 10살 이상인 그룹만을 조회하고싶으면
select t.name, count(m.age), sum(m.age), avg(m.age), max(m.age), min(m.age)
from Member m LEFT JOIN m.team t
group by t.name
having avg(m.age) >= 10


## JPQL 조인
sql 조인과 기능은 같고 문법만 다름 
그리고 조인대상에 연관필드를 넣어야한다
* 내부조인
String teamName = "TeamA";
String query = "select m from Member m inner join m.team t where t.name = :teamName";
List<Member> members = em.createQuery(query, Member.class).setParameter("teamName", teamNaem).getResultList();
// inner는 생략가능 

* 외부조인
select m from Member m left join m.team t

* 컬렉션 조인
회원 -> 팀 으로의 조인은 다대일 조인이면서 단일 값 연관 필드(m.team)를 사용함
팀 -> 회원 으로의 조인은 일대다 조인이면서 컬렉션 값 연관 필드(t.members)를 사용함
select t, m from Team t left join t.members m

* 세타 조인
세타조인을 사용하면 전혀 관계없는 엔티티도 조인할 수 있다.
세타조인은 내부조인만 지원한다.
where 절을 사용해서 세타조인을 할 수 있다. 
select count(m) from Member m, Team t where m.username = t.name
실제 sql
select count(m.id) from member m cross join team t where m.username = t.name

* join on절(JPA2.1부터)
조인대상을 필터링하고 조인할 수 있다.
select m,t from Member m left join m.team t on t.name = 'A'


## 페치 조인 > JPQL에서 성능 최적화를 위해서 제공하는 기능임
연관된 엔티티나 컬렉션을 한 번에 같이 조회하는 기능
일반jpql조인에서는 조회한것만 가져오고 연관된것은 안가져오는데 페치조인은 연관딘것도 가져옴(team같은것)


## 경로 표현식 Path Expression
select m.username
from Member m
    join m.team t
    join m.orders o
where t.name = '팀A'
여기서 . 들어간거는 경로 표현식이다.

* 경로 표현식 용어 정리
상태필드 : 단순히 값을 저장하기 위한 필드 >> 경로 탐색의 끝
연관필드 : 연관관계를 위한 필드, 임베디드 타입 포함 
    - 단일 값 연관 필드: many2one, one2oen >> 묵시적으로 내부 조인이 일어남, 단일값 연관 경로는 계속 탐색 가능
    - 컬렉션 값 연관 필드 : one2many, many2many >> 묵시적으로 내부 조인이 일어남, 더는 탐색할 수 없다. from 절에서 조인을 통해 별칭을 얻으면 탐색가능

* 묵시적 명시적 조인
명시적 조인 : select m from Member m join m.team t
묵시적 조인 : select m.team from Member m


## 서브 쿼리
where, having 절에만 사용 가능
ex)
select m from Member m where m.age > (select avg(m2.age) from Member m2)
(not) exists (서브쿼리) 등등 사용가능
(not) in (서브쿼리)
all (서브쿼리) 조건 모두 만족하면 참
any or some 하나라도 만족하면 참
ex) select o from Order o where o.orderAmount > ALL (select p.stockAmount from Product p) 전체 상품 각각의 재고보다 주문량이 많은 주문들
ex ) select select m from Member m where m.team = any (select t from Team t) // 어떤 팀이든 소속된 회원 

## 그외 컬렉션 스칼라 함수 

## 다형성 쿼리
Item > Book, Album, Movie 그 조회할때는

* Type
조회대상을 한정할때
select i from Item i where type(i) IN (Book, Movie)
in real sql (select i from Item i whree i.DTYPE in ('B', 'M'))

* TREAT(JPA2.1 이상)
타입캐스팅과 비슷
select i from Item i where treat(i as Book).author = 'kim'

## 네임드 쿼리
@Entity
@NamedQuery{
    name = "Member.findByUsername",
    query = "select m from Member m where m.username = :uesrname")
public class Member{
    ...
}
사용할때는
List<Member> resultList = em.creat3eNamedQuery("Member.findByUsername", Member.class).setParameter("username", "user1").getResultList();
